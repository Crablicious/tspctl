// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AnnotationType.
const (
	CHART AnnotationType = "CHART"
	TREE  AnnotationType = "TREE"
)

// Defines values for AnnotationCategoriesResponseStatus.
const (
	AnnotationCategoriesResponseStatusCANCELLED AnnotationCategoriesResponseStatus = "CANCELLED"
	AnnotationCategoriesResponseStatusCOMPLETED AnnotationCategoriesResponseStatus = "COMPLETED"
	AnnotationCategoriesResponseStatusFAILED    AnnotationCategoriesResponseStatus = "FAILED"
	AnnotationCategoriesResponseStatusRUNNING   AnnotationCategoriesResponseStatus = "RUNNING"
)

// Defines values for AnnotationResponseStatus.
const (
	AnnotationResponseStatusCANCELLED AnnotationResponseStatus = "CANCELLED"
	AnnotationResponseStatusCOMPLETED AnnotationResponseStatus = "COMPLETED"
	AnnotationResponseStatusFAILED    AnnotationResponseStatus = "FAILED"
	AnnotationResponseStatusRUNNING   AnnotationResponseStatus = "RUNNING"
)

// Defines values for DataProviderType.
const (
	DATATREE   DataProviderType = "DATA_TREE"
	TABLE      DataProviderType = "TABLE"
	TIMEGRAPH  DataProviderType = "TIME_GRAPH"
	TREETIMEXY DataProviderType = "TREE_TIME_XY"
)

// Defines values for ElementElementType.
const (
	ANNOTATION ElementElementType = "ANNOTATION"
	ARROW      ElementElementType = "ARROW"
	STATE      ElementElementType = "STATE"
)

// Defines values for ExperimentIndexingStatus.
const (
	ExperimentIndexingStatusCLOSED    ExperimentIndexingStatus = "CLOSED"
	ExperimentIndexingStatusCOMPLETED ExperimentIndexingStatus = "COMPLETED"
	ExperimentIndexingStatusRUNNING   ExperimentIndexingStatus = "RUNNING"
)

// Defines values for GenericResponseStatus.
const (
	GenericResponseStatusCANCELLED GenericResponseStatus = "CANCELLED"
	GenericResponseStatusCOMPLETED GenericResponseStatus = "COMPLETED"
	GenericResponseStatusFAILED    GenericResponseStatus = "FAILED"
	GenericResponseStatusRUNNING   GenericResponseStatus = "RUNNING"
)

// Defines values for LinesParametersTableSearchDirection.
const (
	NEXT     LinesParametersTableSearchDirection = "NEXT"
	PREVIOUS LinesParametersTableSearchDirection = "PREVIOUS"
)

// Defines values for MarkerSetsResponseStatus.
const (
	MarkerSetsResponseStatusCANCELLED MarkerSetsResponseStatus = "CANCELLED"
	MarkerSetsResponseStatusCOMPLETED MarkerSetsResponseStatus = "COMPLETED"
	MarkerSetsResponseStatusFAILED    MarkerSetsResponseStatus = "FAILED"
	MarkerSetsResponseStatusRUNNING   MarkerSetsResponseStatus = "RUNNING"
)

// Defines values for RequestedFilterQueryParametersStrategy.
const (
	DEEP    RequestedFilterQueryParametersStrategy = "DEEP"
	SAMPLED RequestedFilterQueryParametersStrategy = "SAMPLED"
)

// Defines values for ServerStatusStatus.
const (
	UP ServerStatusStatus = "UP"
)

// Defines values for StylesResponseStatus.
const (
	StylesResponseStatusCANCELLED StylesResponseStatus = "CANCELLED"
	StylesResponseStatusCOMPLETED StylesResponseStatus = "COMPLETED"
	StylesResponseStatusFAILED    StylesResponseStatus = "FAILED"
	StylesResponseStatusRUNNING   StylesResponseStatus = "RUNNING"
)

// Defines values for TableColumnHeadersResponseStatus.
const (
	TableColumnHeadersResponseStatusCANCELLED TableColumnHeadersResponseStatus = "CANCELLED"
	TableColumnHeadersResponseStatusCOMPLETED TableColumnHeadersResponseStatus = "COMPLETED"
	TableColumnHeadersResponseStatusFAILED    TableColumnHeadersResponseStatus = "FAILED"
	TableColumnHeadersResponseStatusRUNNING   TableColumnHeadersResponseStatus = "RUNNING"
)

// Defines values for TimeGraphArrowsResponseStatus.
const (
	TimeGraphArrowsResponseStatusCANCELLED TimeGraphArrowsResponseStatus = "CANCELLED"
	TimeGraphArrowsResponseStatusCOMPLETED TimeGraphArrowsResponseStatus = "COMPLETED"
	TimeGraphArrowsResponseStatusFAILED    TimeGraphArrowsResponseStatus = "FAILED"
	TimeGraphArrowsResponseStatusRUNNING   TimeGraphArrowsResponseStatus = "RUNNING"
)

// Defines values for TimeGraphStatesResponseStatus.
const (
	TimeGraphStatesResponseStatusCANCELLED TimeGraphStatesResponseStatus = "CANCELLED"
	TimeGraphStatesResponseStatusCOMPLETED TimeGraphStatesResponseStatus = "COMPLETED"
	TimeGraphStatesResponseStatusFAILED    TimeGraphStatesResponseStatus = "FAILED"
	TimeGraphStatesResponseStatusRUNNING   TimeGraphStatesResponseStatus = "RUNNING"
)

// Defines values for TimeGraphTooltipResponseStatus.
const (
	TimeGraphTooltipResponseStatusCANCELLED TimeGraphTooltipResponseStatus = "CANCELLED"
	TimeGraphTooltipResponseStatusCOMPLETED TimeGraphTooltipResponseStatus = "COMPLETED"
	TimeGraphTooltipResponseStatusFAILED    TimeGraphTooltipResponseStatus = "FAILED"
	TimeGraphTooltipResponseStatusRUNNING   TimeGraphTooltipResponseStatus = "RUNNING"
)

// Defines values for TimeGraphTreeResponseStatus.
const (
	TimeGraphTreeResponseStatusCANCELLED TimeGraphTreeResponseStatus = "CANCELLED"
	TimeGraphTreeResponseStatusCOMPLETED TimeGraphTreeResponseStatus = "COMPLETED"
	TimeGraphTreeResponseStatusFAILED    TimeGraphTreeResponseStatus = "FAILED"
	TimeGraphTreeResponseStatusRUNNING   TimeGraphTreeResponseStatus = "RUNNING"
)

// Defines values for TraceIndexingStatus.
const (
	TraceIndexingStatusCLOSED    TraceIndexingStatus = "CLOSED"
	TraceIndexingStatusCOMPLETED TraceIndexingStatus = "COMPLETED"
	TraceIndexingStatusRUNNING   TraceIndexingStatus = "RUNNING"
)

// Defines values for TreeColumnHeaderDataType.
const (
	BINARYNUMBER TreeColumnHeaderDataType = "BINARY_NUMBER"
	DURATION     TreeColumnHeaderDataType = "DURATION"
	NUMBER       TreeColumnHeaderDataType = "NUMBER"
	STRING       TreeColumnHeaderDataType = "STRING"
	TIMERANGE    TreeColumnHeaderDataType = "TIME_RANGE"
	TIMESTAMP    TreeColumnHeaderDataType = "TIMESTAMP"
)

// Defines values for VirtualTableResponseStatus.
const (
	VirtualTableResponseStatusCANCELLED VirtualTableResponseStatus = "CANCELLED"
	VirtualTableResponseStatusCOMPLETED VirtualTableResponseStatus = "COMPLETED"
	VirtualTableResponseStatusFAILED    VirtualTableResponseStatus = "FAILED"
	VirtualTableResponseStatusRUNNING   VirtualTableResponseStatus = "RUNNING"
)

// Defines values for XYResponseStatus.
const (
	XYResponseStatusCANCELLED XYResponseStatus = "CANCELLED"
	XYResponseStatusCOMPLETED XYResponseStatus = "COMPLETED"
	XYResponseStatusFAILED    XYResponseStatus = "FAILED"
	XYResponseStatusRUNNING   XYResponseStatus = "RUNNING"
)

// Defines values for XYTreeResponseStatus.
const (
	CANCELLED XYTreeResponseStatus = "CANCELLED"
	COMPLETED XYTreeResponseStatus = "COMPLETED"
	FAILED    XYTreeResponseStatus = "FAILED"
	RUNNING   XYTreeResponseStatus = "RUNNING"
)

// Annotation An annotation is used to mark an interesting area at a given time or time range
type Annotation struct {
	// Duration Duration of this annotation
	Duration int64 `json:"duration"`

	// EntryId Entry's unique ID or -1 if annotation not associated with an entry
	EntryId int64 `json:"entryId"`

	// Label Text label of this annotation
	Label *string `json:"label,omitempty"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style *OutputElementStyle `json:"style,omitempty"`

	// Time Time of this annotation
	Time int64 `json:"time"`

	// Type Type of annotation indicating its location
	Type AnnotationType `json:"type"`
}

// AnnotationType Type of annotation indicating its location
type AnnotationType string

// AnnotationCategoriesModel Model returned by outputs that contains annotation categories available for this output
type AnnotationCategoriesModel struct {
	// AnnotationCategories Array of all the categories
	AnnotationCategories *[]string `json:"annotationCategories,omitempty"`
}

// AnnotationCategoriesResponse defines model for AnnotationCategoriesResponse.
type AnnotationCategoriesResponse struct {
	// Model Model returned by outputs that contains annotation categories available for this output
	Model *AnnotationCategoriesModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *AnnotationCategoriesResponseStatus `json:"status,omitempty"`
	StatusMessage *string                             `json:"statusMessage,omitempty"`
}

// AnnotationCategoriesResponseStatus All possible statuses for a server response
type AnnotationCategoriesResponseStatus string

// AnnotationModel Model returned by outputs that contains annotations per category
type AnnotationModel struct {
	// Annotations Map of annotations where the keys are categories
	Annotations *map[string][]Annotation `json:"annotations,omitempty"`
}

// AnnotationResponse defines model for AnnotationResponse.
type AnnotationResponse struct {
	// Model Model returned by outputs that contains annotations per category
	Model *AnnotationModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *AnnotationResponseStatus `json:"status,omitempty"`
	StatusMessage *string                   `json:"statusMessage,omitempty"`
}

// AnnotationResponseStatus All possible statuses for a server response
type AnnotationResponseStatus string

// AnnotationsParameters defines model for AnnotationsParameters.
type AnnotationsParameters struct {
	RequestedItems            *[]int32  `json:"requested_items,omitempty"`
	RequestedMarkerCategories *[]string `json:"requested_marker_categories,omitempty"`
	RequestedMarkerSet        *string   `json:"requested_marker_set,omitempty"`

	// RequestedTimerange A time range with optional number of timestamps to be sampled
	RequestedTimerange TimeRange `json:"requested_timerange"`
}

// AnnotationsQueryParameters defines model for AnnotationsQueryParameters.
type AnnotationsQueryParameters struct {
	Parameters AnnotationsParameters `json:"parameters"`
}

// ArrowsParameters defines model for ArrowsParameters.
type ArrowsParameters struct {
	// RequestedTimerange A time range with optional number of timestamps to be sampled
	RequestedTimerange TimeRange `json:"requested_timerange"`
}

// ArrowsQueryParameters defines model for ArrowsQueryParameters.
type ArrowsQueryParameters struct {
	Parameters ArrowsParameters `json:"parameters"`
}

// Configuration defines model for Configuration.
type Configuration struct {
	// Description Describes the configuration instance
	Description *string `json:"description,omitempty"`

	// Id The unique ID of the configuration instance
	Id *string `json:"id,omitempty"`

	// Name The human readable name
	Name *string `json:"name,omitempty"`

	// Parameters Optional informational parameters to return. Can be used to show more details to users of the configuration instance.
	Parameters *map[string]map[string]interface{} `json:"parameters,omitempty"`

	// SourceTypeId The ID of the configuration source type
	SourceTypeId *string `json:"sourceTypeId,omitempty"`
}

// ConfigurationParameterDescriptor A list of configuration parameter descriptors to be passed when creating or updating a configuration instance of this type.
type ConfigurationParameterDescriptor struct {
	// DataType The data type hint of the configuration parameter
	DataType *string `json:"dataType,omitempty"`

	// Description Describes the configuration parameter
	Description *string `json:"description,omitempty"`

	// KeyName The unique key name of the configuration parameter
	KeyName *string `json:"keyName,omitempty"`

	// Required A flag indicating whether the configuration parameter is required or not
	Required *bool `json:"required,omitempty"`
}

// ConfigurationQueryParameters defines model for ConfigurationQueryParameters.
type ConfigurationQueryParameters struct {
	// Parameters Parameters as specified in corresponding ConfigurationTypeDescriptor. Use key `path` for file URI string values.
	Parameters map[string]map[string]interface{} `json:"parameters"`
}

// ConfigurationSourceType defines model for ConfigurationSourceType.
type ConfigurationSourceType struct {
	// Description Describes the configuration source type
	Description *string `json:"description,omitempty"`

	// Id The unique ID of the configuration source type
	Id *string `json:"id,omitempty"`

	// Name The human readable name
	Name *string `json:"name,omitempty"`

	// ParameterDescriptors A list of configuration parameter descriptors to be passed when creating or updating a configuration instance of this type.
	ParameterDescriptors *[]ConfigurationParameterDescriptor `json:"parameterDescriptors,omitempty"`
}

// DataProvider defines model for DataProvider.
type DataProvider struct {
	// Description Describes the output provider's features
	Description *string `json:"description,omitempty"`

	// Id The output provider's ID
	Id *string `json:"id,omitempty"`

	// Name The human readable name
	Name *string `json:"name,omitempty"`

	// Type Type of data returned by this output. Serves as a hint to determine what kind of view should be used for this output (ex. XY, Time Graph, Table, etc..). Providers of type TREE_TIME_XY and TIME_GRAPH can be grouped under the same time axis. Providers of type DATA_TREE only provide a tree with columns and don't have any XY nor time graph data associated with it.
	Type *DataProviderType `json:"type,omitempty"`
}

// DataProviderType Type of data returned by this output. Serves as a hint to determine what kind of view should be used for this output (ex. XY, Time Graph, Table, etc..). Providers of type TREE_TIME_XY and TIME_GRAPH can be grouped under the same time axis. Providers of type DATA_TREE only provide a tree with columns and don't have any XY nor time graph data associated with it.
type DataProviderType string

// Element An element model to be identified
type Element struct {
	// DestinationId Destination entry's unique ID (arrow)
	DestinationId *int64 `json:"destinationId,omitempty"`

	// Duration Element's duration
	Duration int64 `json:"duration"`

	// ElementType The type of element
	ElementType ElementElementType `json:"elementType"`

	// EntryId Entry's unique ID (annotation, arrow)
	EntryId *int64 `json:"entryId,omitempty"`

	// Time Element's start time
	Time int64 `json:"time"`
}

// ElementElementType The type of element
type ElementElementType string

// Experiment defines model for Experiment.
type Experiment struct {
	// UUID The experiment's unique identifier
	UUID *openapi_types.UUID `json:"UUID,omitempty"`

	// End The experiment's end time
	End *int64 `json:"end,omitempty"`

	// IndexingStatus Status of the experiment indexing
	IndexingStatus *ExperimentIndexingStatus `json:"indexingStatus,omitempty"`

	// Name User defined name for the experiment
	Name *string `json:"name,omitempty"`

	// NbEvents Current number of indexed events in the experiment
	NbEvents *int64 `json:"nbEvents,omitempty"`

	// Start The experiment's start time
	Start *int64 `json:"start,omitempty"`

	// Traces The traces encapsulated by this experiment
	Traces *[]Trace `json:"traces,omitempty"`
}

// ExperimentIndexingStatus Status of the experiment indexing
type ExperimentIndexingStatus string

// ExperimentParameters defines model for ExperimentParameters.
type ExperimentParameters struct {
	Parameters ExperimentQueryParameters `json:"parameters"`
}

// ExperimentQueryParameters defines model for ExperimentQueryParameters.
type ExperimentQueryParameters struct {
	// Name The name to give this experiment
	Name string `json:"name"`

	// Traces The unique identifiers of the traces to encapsulate in this experiment
	Traces []openapi_types.UUID `json:"traces"`
}

// GenericResponse Response that includes the status and a status message
type GenericResponse struct {
	// Status All possible statuses for a server response
	Status        *GenericResponseStatus `json:"status,omitempty"`
	StatusMessage *string                `json:"statusMessage,omitempty"`
}

// GenericResponseStatus All possible statuses for a server response
type GenericResponseStatus string

// LinesParameters defines model for LinesParameters.
type LinesParameters struct {
	RequestedTableColumnIds *[]int64 `json:"requested_table_column_ids,omitempty"`
	RequestedTableCount     int32    `json:"requested_table_count"`
	RequestedTableIndex     *int64   `json:"requested_table_index,omitempty"`
	RequestedTimes          *[]int64 `json:"requested_times,omitempty"`

	// TableSearchDirection Search next or previous item (e.g. event, state etc.)
	TableSearchDirection   *LinesParametersTableSearchDirection `json:"table_search_direction,omitempty"`
	TableSearchExpressions *map[string]string                   `json:"table_search_expressions,omitempty"`
}

// LinesParametersTableSearchDirection Search next or previous item (e.g. event, state etc.)
type LinesParametersTableSearchDirection string

// LinesQueryParameters defines model for LinesQueryParameters.
type LinesQueryParameters struct {
	Parameters LinesParameters `json:"parameters"`
}

// MarkerSet A marker set is used to represent a set of annotations that can be fetched
type MarkerSet struct {
	// Id ID of this marker set
	Id *string `json:"id,omitempty"`

	// Name Name of this marker set
	Name *string `json:"name,omitempty"`
}

// MarkerSetsResponse defines model for MarkerSetsResponse.
type MarkerSetsResponse struct {
	Model *[]MarkerSet `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *MarkerSetsResponseStatus `json:"status,omitempty"`
	StatusMessage *string                   `json:"statusMessage,omitempty"`
}

// MarkerSetsResponseStatus All possible statuses for a server response
type MarkerSetsResponseStatus string

// OptionalParameters defines model for OptionalParameters.
type OptionalParameters = map[string]interface{}

// OptionalQueryParameters defines model for OptionalQueryParameters.
type OptionalQueryParameters struct {
	Parameters OptionalParameters `json:"parameters"`
}

// OutputElementStyle Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
type OutputElementStyle struct {
	// ParentKey Parent style key or empty if there is no parent. The parent key should match a style key defined in the style model and is used for style inheritance. A comma-delimited list of parent style keys can be used for style composition, the last one taking precedence.
	ParentKey *string `json:"parentKey,omitempty"`

	// Values Style values or empty map if there are no values. Keys and values are defined in https://git.eclipse.org/r/plugins/gitiles/tracecompass/org.eclipse.tracecompass/+/refs/heads/master/tmf/org.eclipse.tracecompass.tmf.core/src/org/eclipse/tracecompass/tmf/core/model/StyleProperties.java
	Values *map[string]interface{} `json:"values,omitempty"`
}

// OutputStyleModel Map of styles specific to an output where values give hints on the style. The keys are strings that can be used in OutputElementStyle
type OutputStyleModel struct {
	Styles *map[string]OutputElementStyle `json:"styles,omitempty"`
}

// RequestedFilterQueryParameters FilterQueryParameters is used to support search and filter expressions for timegraph views
type RequestedFilterQueryParameters struct {
	// FilterExpressionsMap The key of this map can be "1" (means DIMMED) or "4" (means EXCLUDED) and the value is an array of the desired search query (e.g. {"1": ["openat", "duration>10ms"]})
	FilterExpressionsMap map[string][]string `json:"filter_expressions_map"`

	// Strategy Optional parameter that enables the full search (deep search) or not
	Strategy *RequestedFilterQueryParametersStrategy `json:"strategy,omitempty"`
}

// RequestedFilterQueryParametersStrategy Optional parameter that enables the full search (deep search) or not
type RequestedFilterQueryParametersStrategy string

// RequestedParameters defines model for RequestedParameters.
type RequestedParameters struct {
	// FilterQueryParameters FilterQueryParameters is used to support search and filter expressions for timegraph views
	FilterQueryParameters *RequestedFilterQueryParameters `json:"filter_query_parameters,omitempty"`
	RequestedItems        []int32                         `json:"requested_items"`

	// RequestedTimerange A time range with optional number of timestamps to be sampled
	RequestedTimerange TimeRange `json:"requested_timerange"`
}

// RequestedQueryParameters defines model for RequestedQueryParameters.
type RequestedQueryParameters struct {
	Parameters RequestedParameters `json:"parameters"`
}

// SeriesModel This model includes the series output style values.
type SeriesModel struct {
	// SeriesId Series' ID
	SeriesId int64 `json:"seriesId"`

	// SeriesName Series' name
	SeriesName string `json:"seriesName"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style OutputElementStyle `json:"style"`

	// XValues Series' X values
	XValues []int64 `json:"xValues"`

	// YValues Series' Y values
	YValues []float64 `json:"yValues"`
}

// ServerInfoResponse System Information Response
type ServerInfoResponse struct {
	// BuildTime Build time or qualifier of the server version, if available
	BuildTime *string `json:"buildTime,omitempty"`

	// CpuCount Number of CPUs available
	CpuCount *int32 `json:"cpuCount,omitempty"`

	// LauncherName Name of the launcher used, if available
	LauncherName *string `json:"launcherName,omitempty"`

	// MaxMemory Maximum memory available to the JVM in bytes
	MaxMemory *int64 `json:"maxMemory,omitempty"`

	// Os Operating system name
	Os string `json:"os"`

	// OsArch Architecture of the operating system
	OsArch *string `json:"osArch,omitempty"`

	// OsVersion Operating system version
	OsVersion *string `json:"osVersion,omitempty"`

	// ProductId Product identifier for the trace server
	ProductId string `json:"productId"`

	// Version Version in the format Major.Minor.Micro
	Version string `json:"version"`
}

// ServerStatus defines model for ServerStatus.
type ServerStatus struct {
	// Status The status of the server
	Status *ServerStatusStatus `json:"status,omitempty"`
}

// ServerStatusStatus The status of the server
type ServerStatusStatus string

// StylesResponse defines model for StylesResponse.
type StylesResponse struct {
	// Model Map of styles specific to an output where values give hints on the style. The keys are strings that can be used in OutputElementStyle
	Model *OutputStyleModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *StylesResponseStatus `json:"status,omitempty"`
	StatusMessage *string               `json:"statusMessage,omitempty"`
}

// StylesResponseStatus All possible statuses for a server response
type StylesResponseStatus string

// TableColumnHeader defines model for TableColumnHeader.
type TableColumnHeader struct {
	// Description Description of the column
	Description *string `json:"description,omitempty"`

	// Id Unique id to identify this column in the backend
	Id *int64 `json:"id,omitempty"`

	// Name Displayed name for this column
	Name *string `json:"name,omitempty"`

	// Type Type of data associated to this column
	Type *string `json:"type,omitempty"`
}

// TableColumnHeadersResponse defines model for TableColumnHeadersResponse.
type TableColumnHeadersResponse struct {
	Model *[]TableColumnHeader `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *TableColumnHeadersResponseStatus `json:"status,omitempty"`
	StatusMessage *string                           `json:"statusMessage,omitempty"`
}

// TableColumnHeadersResponseStatus All possible statuses for a server response
type TableColumnHeadersResponseStatus string

// TimeGraphArrow defines model for TimeGraphArrow.
type TimeGraphArrow struct {
	// End End time for this arrow
	End int64 `json:"end"`

	// SourceId Source entry's unique ID
	SourceId int64 `json:"sourceId"`

	// Start Start time for this arrow
	Start int64 `json:"start"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style *OutputElementStyle `json:"style,omitempty"`

	// TargetId Target entry's unique ID
	TargetId int64 `json:"targetId"`
}

// TimeGraphArrowsResponse defines model for TimeGraphArrowsResponse.
type TimeGraphArrowsResponse struct {
	Model *[]TimeGraphArrow `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *TimeGraphArrowsResponseStatus `json:"status,omitempty"`
	StatusMessage *string                        `json:"statusMessage,omitempty"`
}

// TimeGraphArrowsResponseStatus All possible statuses for a server response
type TimeGraphArrowsResponseStatus string

// TimeGraphEntry defines model for TimeGraphEntry.
type TimeGraphEntry struct {
	// End End of the range for which this entry exists
	End *int64 `json:"end,omitempty"`

	// HasData Whether or not this entry has data
	HasData *bool `json:"hasData,omitempty"`

	// Id Unique id to identify this entry in the backend
	Id int64 `json:"id"`

	// Labels Array of cell labels to be displayed. The length of the array and the index of each column need to correspond to the header array returned in the tree model.
	Labels []string `json:"labels"`

	// Metadata Optional metadata map for domain specific data for matching data across data providers. Keys for the same data shall be the same across data providers. Only values of type Number or String are allowed. For each key all values shall have the same type.
	Metadata *map[string][]map[string]interface{} `json:"metadata,omitempty"`

	// ParentId Unique id to identify this parent's entry, optional if this entry does not have a parent.
	ParentId *int64 `json:"parentId,omitempty"`

	// Start Beginning of the range for which this entry exists
	Start *int64 `json:"start,omitempty"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style *OutputElementStyle `json:"style,omitempty"`
}

// TimeGraphModel defines model for TimeGraphModel.
type TimeGraphModel struct {
	Rows *[]TimeGraphRowModel `json:"rows,omitempty"`
}

// TimeGraphRowModel defines model for TimeGraphRowModel.
type TimeGraphRowModel struct {
	// EntryId The entry to map this state list to
	EntryId int64 `json:"entryId"`

	// States List of the time graph entry states associated to this entry and zoom level
	States []TimeGraphState `json:"states"`
}

// TimeGraphState defines model for TimeGraphState.
type TimeGraphState struct {
	// End End time for this state
	End int64 `json:"end"`

	// Label Text label to apply to this TimeGraphState if resolution permits. Optional, no label is applied if absent
	Label *string `json:"label,omitempty"`

	// Start Start time for this state
	Start int64 `json:"start"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style *OutputElementStyle `json:"style,omitempty"`

	// Tags Tags to apply on this state. A value of 0 should be handled as none (no tags)
	Tags *int32 `json:"tags,omitempty"`
}

// TimeGraphStatesResponse defines model for TimeGraphStatesResponse.
type TimeGraphStatesResponse struct {
	Model *TimeGraphModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *TimeGraphStatesResponseStatus `json:"status,omitempty"`
	StatusMessage *string                        `json:"statusMessage,omitempty"`
}

// TimeGraphStatesResponseStatus All possible statuses for a server response
type TimeGraphStatesResponseStatus string

// TimeGraphTooltip defines model for TimeGraphTooltip.
type TimeGraphTooltip struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// TimeGraphTooltipResponse defines model for TimeGraphTooltipResponse.
type TimeGraphTooltipResponse struct {
	Model *[]TimeGraphTooltip `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *TimeGraphTooltipResponseStatus `json:"status,omitempty"`
	StatusMessage *string                         `json:"statusMessage,omitempty"`
}

// TimeGraphTooltipResponseStatus All possible statuses for a server response
type TimeGraphTooltipResponseStatus string

// TimeGraphTreeModel defines model for TimeGraphTreeModel.
type TimeGraphTreeModel struct {
	Entries []TimeGraphEntry    `json:"entries"`
	Headers *[]TreeColumnHeader `json:"headers,omitempty"`
}

// TimeGraphTreeResponse defines model for TimeGraphTreeResponse.
type TimeGraphTreeResponse struct {
	Model *TimeGraphTreeModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *TimeGraphTreeResponseStatus `json:"status,omitempty"`
	StatusMessage *string                      `json:"statusMessage,omitempty"`
}

// TimeGraphTreeResponseStatus All possible statuses for a server response
type TimeGraphTreeResponseStatus string

// TimeRange A time range with optional number of timestamps to be sampled
type TimeRange struct {
	// End The end of the time range
	End int64 `json:"end"`

	// NbTimes The number of timestamps to be sampled (1-65536) in the given range
	NbTimes *int32 `json:"nbTimes,omitempty"`

	// Start The start of the time range
	Start int64 `json:"start"`
}

// TooltipParameters defines model for TooltipParameters.
type TooltipParameters struct {
	// RequestedElement An element model to be identified
	RequestedElement Element `json:"requested_element"`
	RequestedItems   []int32 `json:"requested_items"`
	RequestedTimes   []int64 `json:"requested_times"`
}

// TooltipQueryParameters defines model for TooltipQueryParameters.
type TooltipQueryParameters struct {
	Parameters TooltipParameters `json:"parameters"`
}

// Trace defines model for Trace.
type Trace struct {
	// UUID The trace's unique identifier
	UUID *openapi_types.UUID `json:"UUID,omitempty"`

	// End The trace's end time
	End *int64 `json:"end,omitempty"`

	// IndexingStatus Status of the trace indexing
	IndexingStatus *TraceIndexingStatus `json:"indexingStatus,omitempty"`

	// Name User defined name for the trace
	Name *string `json:"name,omitempty"`

	// NbEvents Current number of indexed events in the trace
	NbEvents *int64 `json:"nbEvents,omitempty"`

	// Path Path to the trace on the server's file system
	Path *string `json:"path,omitempty"`

	// Start The trace's start time
	Start *int64 `json:"start,omitempty"`
}

// TraceIndexingStatus Status of the trace indexing
type TraceIndexingStatus string

// TraceParameters defines model for TraceParameters.
type TraceParameters struct {
	Parameters TraceQueryParameters `json:"parameters"`
}

// TraceQueryParameters defines model for TraceQueryParameters.
type TraceQueryParameters struct {
	// Name The name of the trace in the server, to override the default name
	Name *string `json:"name,omitempty"`

	// TypeID The trace type's ID, to force the use of a parser / disambiguate the trace type
	TypeID *string `json:"typeID,omitempty"`

	// Uri URI of the trace
	Uri string `json:"uri"`
}

// TreeColumnHeader defines model for TreeColumnHeader.
type TreeColumnHeader struct {
	// DataType Data type of column. Optional, data type STRING is applied if absent.
	DataType *TreeColumnHeaderDataType `json:"dataType,omitempty"`

	// Name Displayed name for this header
	Name string `json:"name"`

	// Tooltip Displayed tooltip for this header. Optional, no tooltip is applied if absent.
	Tooltip *string `json:"tooltip,omitempty"`
}

// TreeColumnHeaderDataType Data type of column. Optional, data type STRING is applied if absent.
type TreeColumnHeaderDataType string

// TreeDataModel Base entry returned by tree endpoints
type TreeDataModel struct {
	// HasData Whether or not this entry has data
	HasData *bool `json:"hasData,omitempty"`

	// Id Unique id to identify this entry in the backend
	Id int64 `json:"id"`

	// Labels Array of cell labels to be displayed. The length of the array and the index of each column need to correspond to the header array returned in the tree model.
	Labels []string `json:"labels"`

	// ParentId Unique id to identify this parent's entry, optional if this entry does not have a parent.
	ParentId *int64 `json:"parentId,omitempty"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style *OutputElementStyle `json:"style,omitempty"`
}

// TreeEntryModel defines model for TreeEntryModel.
type TreeEntryModel struct {
	Entries []TreeDataModel     `json:"entries"`
	Headers *[]TreeColumnHeader `json:"headers,omitempty"`
}

// TreeParameters defines model for TreeParameters.
type TreeParameters struct {
	RequestedTimes *[]int64 `json:"requested_times,omitempty"`
}

// TreeQueryParameters defines model for TreeQueryParameters.
type TreeQueryParameters struct {
	Parameters TreeParameters `json:"parameters"`
}

// VirtualTableCell defines model for VirtualTableCell.
type VirtualTableCell struct {
	// Content Content of the cell for this line
	Content *string `json:"content,omitempty"`

	// Tags Specific tags for this cell. A value of 0 should be handled as none (no tags)
	Tags *int32 `json:"tags,omitempty"`
}

// VirtualTableLine defines model for VirtualTableLine.
type VirtualTableLine struct {
	// Cells The content of the cells for this line. This array matches the column ids returned above
	Cells *[]VirtualTableCell `json:"cells,omitempty"`

	// Index The index of this line in the virtual table
	Index *int64 `json:"index,omitempty"`

	// Tags Tags for the entire line. A bit mask to apply for tagging elements (e.g. table lines, states). This can be used by the server to indicate if a filter matches and what action to apply. Use 0 for no tags, 1 and 2 are reserved, 4 for 'BORDER' and 8 for 'HIGHLIGHT'.
	Tags *int32 `json:"tags,omitempty"`
}

// VirtualTableModel defines model for VirtualTableModel.
type VirtualTableModel struct {
	// ColumnIds The array of column ids that are returned. They should match the content of the lines' content
	ColumnIds *[]int64            `json:"columnIds,omitempty"`
	Lines     *[]VirtualTableLine `json:"lines,omitempty"`

	// LowIndex Index in the virtual table of the first returned event
	LowIndex *int64 `json:"lowIndex,omitempty"`

	// Size Number of events. If filtered, the size will be the number of events that match the filters
	Size *int64 `json:"size,omitempty"`
}

// VirtualTableResponse defines model for VirtualTableResponse.
type VirtualTableResponse struct {
	Model *VirtualTableModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *VirtualTableResponseStatus `json:"status,omitempty"`
	StatusMessage *string                     `json:"statusMessage,omitempty"`
}

// VirtualTableResponseStatus All possible statuses for a server response
type VirtualTableResponseStatus string

// XYModel defines model for XYModel.
type XYModel struct {
	// Series The collection of series
	Series []SeriesModel `json:"series"`

	// Title Title of the model
	Title string `json:"title"`
}

// XYResponse defines model for XYResponse.
type XYResponse struct {
	Model *XYModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *XYResponseStatus `json:"status,omitempty"`
	StatusMessage *string           `json:"statusMessage,omitempty"`
}

// XYResponseStatus All possible statuses for a server response
type XYResponseStatus string

// XYTreeEntry defines model for XYTreeEntry.
type XYTreeEntry struct {
	// HasData Whether or not this entry has data
	HasData *bool `json:"hasData,omitempty"`

	// Id Unique id to identify this entry in the backend
	Id int64 `json:"id"`

	// IsDefault Optional flag to indicate whether or not the entry is a default entry and its xy data should be fetched by default.
	IsDefault *bool `json:"isDefault,omitempty"`

	// Labels Array of cell labels to be displayed. The length of the array and the index of each column need to correspond to the header array returned in the tree model.
	Labels []string `json:"labels"`

	// ParentId Unique id to identify this parent's entry, optional if this entry does not have a parent.
	ParentId *int64 `json:"parentId,omitempty"`

	// Style Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output. Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent, and can add or override style properties.
	Style *OutputElementStyle `json:"style,omitempty"`
}

// XYTreeEntryModel defines model for XYTreeEntryModel.
type XYTreeEntryModel struct {
	Entries []XYTreeEntry       `json:"entries"`
	Headers *[]TreeColumnHeader `json:"headers,omitempty"`
}

// XYTreeResponse defines model for XYTreeResponse.
type XYTreeResponse struct {
	Model *XYTreeEntryModel `json:"model,omitempty"`

	// Status All possible statuses for a server response
	Status        *XYTreeResponseStatus `json:"status,omitempty"`
	StatusMessage *string               `json:"statusMessage,omitempty"`
}

// XYTreeResponseStatus All possible statuses for a server response
type XYTreeResponseStatus string

// GetAnnotationCategoriesParams defines parameters for GetAnnotationCategories.
type GetAnnotationCategoriesParams struct {
	// MarkerSetId The optional requested marker set's id
	MarkerSetId *string `form:"markerSetId,omitempty" json:"markerSetId,omitempty"`
}

// PostConfigurationJSONRequestBody defines body for PostConfiguration for application/json ContentType.
type PostConfigurationJSONRequestBody = ConfigurationQueryParameters

// PutConfigurationJSONRequestBody defines body for PutConfiguration for application/json ContentType.
type PutConfigurationJSONRequestBody = ConfigurationQueryParameters

// PostExperimentJSONRequestBody defines body for PostExperiment for application/json ContentType.
type PostExperimentJSONRequestBody = ExperimentParameters

// GetXYTreeJSONRequestBody defines body for GetXYTree for application/json ContentType.
type GetXYTreeJSONRequestBody = TreeQueryParameters

// GetXYJSONRequestBody defines body for GetXY for application/json ContentType.
type GetXYJSONRequestBody = RequestedQueryParameters

// GetDataTreeJSONRequestBody defines body for GetDataTree for application/json ContentType.
type GetDataTreeJSONRequestBody = TreeQueryParameters

// GetColumnsJSONRequestBody defines body for GetColumns for application/json ContentType.
type GetColumnsJSONRequestBody = OptionalQueryParameters

// GetLinesJSONRequestBody defines body for GetLines for application/json ContentType.
type GetLinesJSONRequestBody = LinesQueryParameters

// GetArrowsJSONRequestBody defines body for GetArrows for application/json ContentType.
type GetArrowsJSONRequestBody = ArrowsQueryParameters

// GetStatesJSONRequestBody defines body for GetStates for application/json ContentType.
type GetStatesJSONRequestBody = RequestedQueryParameters

// GetTimeGraphTooltipJSONRequestBody defines body for GetTimeGraphTooltip for application/json ContentType.
type GetTimeGraphTooltipJSONRequestBody = TooltipQueryParameters

// GetTimeGraphTreeJSONRequestBody defines body for GetTimeGraphTree for application/json ContentType.
type GetTimeGraphTreeJSONRequestBody = TreeQueryParameters

// GetAnnotationsJSONRequestBody defines body for GetAnnotations for application/json ContentType.
type GetAnnotationsJSONRequestBody = AnnotationsQueryParameters

// GetStylesJSONRequestBody defines body for GetStyles for application/json ContentType.
type GetStylesJSONRequestBody = OptionalQueryParameters

// PutTraceJSONRequestBody defines body for PutTrace for application/json ContentType.
type PutTraceJSONRequestBody = TraceParameters

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConfigurationTypes request
	GetConfigurationTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigurationType request
	GetConfigurationType(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfigurations request
	GetConfigurations(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConfigurationWithBody request with any body
	PostConfigurationWithBody(ctx context.Context, typeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostConfiguration(ctx context.Context, typeId string, body PostConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConfiguration request
	DeleteConfiguration(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfiguration request
	GetConfiguration(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutConfigurationWithBody request with any body
	PutConfigurationWithBody(ctx context.Context, typeId string, configId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutConfiguration(ctx context.Context, typeId string, configId string, body PutConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperiments request
	GetExperiments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExperimentWithBody request with any body
	PostExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExperiment(ctx context.Context, body PostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteExperiment request
	DeleteExperiment(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExperiment request
	GetExperiment(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviders request
	GetProviders(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetXYTreeWithBody request with any body
	GetXYTreeWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetXYTree(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetXYWithBody request with any body
	GetXYWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetXY(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDataTreeWithBody request with any body
	GetDataTreeWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDataTree(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetDataTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarkerSets request
	GetMarkerSets(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColumnsWithBody request with any body
	GetColumnsWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetColumns(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetColumnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLinesWithBody request with any body
	GetLinesWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLines(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArrowsWithBody request with any body
	GetArrowsWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetArrows(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetArrowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatesWithBody request with any body
	GetStatesWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStates(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeGraphTooltipWithBody request with any body
	GetTimeGraphTooltipWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTimeGraphTooltip(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTooltipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeGraphTreeWithBody request with any body
	GetTimeGraphTreeWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetTimeGraphTree(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvider request
	GetProvider(ctx context.Context, expUUID openapi_types.UUID, outputId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnotationCategories request
	GetAnnotationCategories(ctx context.Context, expUUID openapi_types.UUID, outputId string, params *GetAnnotationCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnotationsWithBody request with any body
	GetAnnotationsWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAnnotations(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStylesWithBody request with any body
	GetStylesWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetStyles(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStylesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealthStatus request
	GetHealthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemInfo request
	GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraces request
	GetTraces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTraceWithBody request with any body
	PutTraceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTrace(ctx context.Context, body PutTraceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTrace request
	DeleteTrace(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrace request
	GetTrace(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConfigurationTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigurationType(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationTypeRequest(c.Server, typeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfigurations(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationsRequest(c.Server, typeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfigurationWithBody(ctx context.Context, typeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigurationRequestWithBody(c.Server, typeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConfiguration(ctx context.Context, typeId string, body PostConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConfigurationRequest(c.Server, typeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConfiguration(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConfigurationRequest(c.Server, typeId, configId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfiguration(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigurationRequest(c.Server, typeId, configId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConfigurationWithBody(ctx context.Context, typeId string, configId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConfigurationRequestWithBody(c.Server, typeId, configId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutConfiguration(ctx context.Context, typeId string, configId string, body PutConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutConfigurationRequest(c.Server, typeId, configId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperiments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExperimentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExperimentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExperiment(ctx context.Context, body PostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExperimentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteExperiment(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteExperimentRequest(c.Server, expUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExperiment(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExperimentRequest(c.Server, expUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviders(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersRequest(c.Server, expUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetXYTreeWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetXYTreeRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetXYTree(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetXYTreeRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetXYWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetXYRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetXY(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetXYRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataTreeWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataTreeRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDataTree(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetDataTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDataTreeRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarkerSets(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarkerSetsRequest(c.Server, expUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColumnsWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColumnsRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColumns(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetColumnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColumnsRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLinesWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLinesRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLines(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLinesRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArrowsWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArrowsRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArrows(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetArrowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArrowsRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatesWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatesRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStates(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatesRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeGraphTooltipWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeGraphTooltipRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeGraphTooltip(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTooltipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeGraphTooltipRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeGraphTreeWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeGraphTreeRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeGraphTree(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeGraphTreeRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvider(ctx context.Context, expUUID openapi_types.UUID, outputId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderRequest(c.Server, expUUID, outputId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnotationCategories(ctx context.Context, expUUID openapi_types.UUID, outputId string, params *GetAnnotationCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnotationCategoriesRequest(c.Server, expUUID, outputId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnotationsWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnotationsRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnotations(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnotationsRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStylesWithBody(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStylesRequestWithBody(c.Server, expUUID, outputId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStyles(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStylesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStylesRequest(c.Server, expUUID, outputId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTraceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTraceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTrace(ctx context.Context, body PutTraceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTraceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTrace(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTraceRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrace(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConfigurationTypesRequest generates requests for GetConfigurationTypes
func NewGetConfigurationTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigurationTypeRequest generates requests for GetConfigurationType
func NewGetConfigurationTypeRequest(server string, typeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigurationsRequest generates requests for GetConfigurations
func NewGetConfigurationsRequest(server string, typeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types/%s/configs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConfigurationRequest calls the generic PostConfiguration builder with application/json body
func NewPostConfigurationRequest(server string, typeId string, body PostConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostConfigurationRequestWithBody(server, typeId, "application/json", bodyReader)
}

// NewPostConfigurationRequestWithBody generates requests for PostConfiguration with any type of body
func NewPostConfigurationRequestWithBody(server string, typeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types/%s/configs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConfigurationRequest generates requests for DeleteConfiguration
func NewDeleteConfigurationRequest(server string, typeId string, configId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configId", runtime.ParamLocationPath, configId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types/%s/configs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigurationRequest generates requests for GetConfiguration
func NewGetConfigurationRequest(server string, typeId string, configId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configId", runtime.ParamLocationPath, configId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types/%s/configs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutConfigurationRequest calls the generic PutConfiguration builder with application/json body
func NewPutConfigurationRequest(server string, typeId string, configId string, body PutConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutConfigurationRequestWithBody(server, typeId, configId, "application/json", bodyReader)
}

// NewPutConfigurationRequestWithBody generates requests for PutConfiguration with any type of body
func NewPutConfigurationRequestWithBody(server string, typeId string, configId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "typeId", runtime.ParamLocationPath, typeId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "configId", runtime.ParamLocationPath, configId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config/types/%s/configs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExperimentsRequest generates requests for GetExperiments
func NewGetExperimentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostExperimentRequest calls the generic PostExperiment builder with application/json body
func NewPostExperimentRequest(server string, body PostExperimentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExperimentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostExperimentRequestWithBody generates requests for PostExperiment with any type of body
func NewPostExperimentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteExperimentRequest generates requests for DeleteExperiment
func NewDeleteExperimentRequest(server string, expUUID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExperimentRequest generates requests for GetExperiment
func NewGetExperimentRequest(server string, expUUID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersRequest generates requests for GetProviders
func NewGetProvidersRequest(server string, expUUID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetXYTreeRequest calls the generic GetXYTree builder with application/json body
func NewGetXYTreeRequest(server string, expUUID openapi_types.UUID, outputId string, body GetXYTreeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetXYTreeRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetXYTreeRequestWithBody generates requests for GetXYTree with any type of body
func NewGetXYTreeRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/XY/%s/tree", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetXYRequest calls the generic GetXY builder with application/json body
func NewGetXYRequest(server string, expUUID openapi_types.UUID, outputId string, body GetXYJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetXYRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetXYRequestWithBody generates requests for GetXY with any type of body
func NewGetXYRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/XY/%s/xy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDataTreeRequest calls the generic GetDataTree builder with application/json body
func NewGetDataTreeRequest(server string, expUUID openapi_types.UUID, outputId string, body GetDataTreeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDataTreeRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetDataTreeRequestWithBody generates requests for GetDataTree with any type of body
func NewGetDataTreeRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/data/%s/tree", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMarkerSetsRequest generates requests for GetMarkerSets
func NewGetMarkerSetsRequest(server string, expUUID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/markerSets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColumnsRequest calls the generic GetColumns builder with application/json body
func NewGetColumnsRequest(server string, expUUID openapi_types.UUID, outputId string, body GetColumnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetColumnsRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetColumnsRequestWithBody generates requests for GetColumns with any type of body
func NewGetColumnsRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/table/%s/columns", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLinesRequest calls the generic GetLines builder with application/json body
func NewGetLinesRequest(server string, expUUID openapi_types.UUID, outputId string, body GetLinesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLinesRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetLinesRequestWithBody generates requests for GetLines with any type of body
func NewGetLinesRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/table/%s/lines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArrowsRequest calls the generic GetArrows builder with application/json body
func NewGetArrowsRequest(server string, expUUID openapi_types.UUID, outputId string, body GetArrowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetArrowsRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetArrowsRequestWithBody generates requests for GetArrows with any type of body
func NewGetArrowsRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/timeGraph/%s/arrows", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatesRequest calls the generic GetStates builder with application/json body
func NewGetStatesRequest(server string, expUUID openapi_types.UUID, outputId string, body GetStatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStatesRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetStatesRequestWithBody generates requests for GetStates with any type of body
func NewGetStatesRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/timeGraph/%s/states", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimeGraphTooltipRequest calls the generic GetTimeGraphTooltip builder with application/json body
func NewGetTimeGraphTooltipRequest(server string, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTooltipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTimeGraphTooltipRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetTimeGraphTooltipRequestWithBody generates requests for GetTimeGraphTooltip with any type of body
func NewGetTimeGraphTooltipRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/timeGraph/%s/tooltip", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTimeGraphTreeRequest calls the generic GetTimeGraphTree builder with application/json body
func NewGetTimeGraphTreeRequest(server string, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTreeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetTimeGraphTreeRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetTimeGraphTreeRequestWithBody generates requests for GetTimeGraphTree with any type of body
func NewGetTimeGraphTreeRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/timeGraph/%s/tree", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProviderRequest generates requests for GetProvider
func NewGetProviderRequest(server string, expUUID openapi_types.UUID, outputId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnnotationCategoriesRequest generates requests for GetAnnotationCategories
func NewGetAnnotationCategoriesRequest(server string, expUUID openapi_types.UUID, outputId string, params *GetAnnotationCategoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/%s/annotations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MarkerSetId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "markerSetId", runtime.ParamLocationQuery, *params.MarkerSetId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnnotationsRequest calls the generic GetAnnotations builder with application/json body
func NewGetAnnotationsRequest(server string, expUUID openapi_types.UUID, outputId string, body GetAnnotationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAnnotationsRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetAnnotationsRequestWithBody generates requests for GetAnnotations with any type of body
func NewGetAnnotationsRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/%s/annotations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStylesRequest calls the generic GetStyles builder with application/json body
func NewGetStylesRequest(server string, expUUID openapi_types.UUID, outputId string, body GetStylesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStylesRequestWithBody(server, expUUID, outputId, "application/json", bodyReader)
}

// NewGetStylesRequestWithBody generates requests for GetStyles with any type of body
func NewGetStylesRequestWithBody(server string, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "expUUID", runtime.ParamLocationPath, expUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "outputId", runtime.ParamLocationPath, outputId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/experiments/%s/outputs/%s/style", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthStatusRequest generates requests for GetHealthStatus
func NewGetHealthStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemInfoRequest generates requests for GetSystemInfo
func NewGetSystemInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifier")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracesRequest generates requests for GetTraces
func NewGetTracesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTraceRequest calls the generic PutTrace builder with application/json body
func NewPutTraceRequest(server string, body PutTraceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTraceRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTraceRequestWithBody generates requests for PutTrace with any type of body
func NewPutTraceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTraceRequest generates requests for DeleteTrace
func NewDeleteTraceRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceRequest generates requests for GetTrace
func NewGetTraceRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConfigurationTypesWithResponse request
	GetConfigurationTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationTypesResponse, error)

	// GetConfigurationTypeWithResponse request
	GetConfigurationTypeWithResponse(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*GetConfigurationTypeResponse, error)

	// GetConfigurationsWithResponse request
	GetConfigurationsWithResponse(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*GetConfigurationsResponse, error)

	// PostConfigurationWithBodyWithResponse request with any body
	PostConfigurationWithBodyWithResponse(ctx context.Context, typeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigurationResponse, error)

	PostConfigurationWithResponse(ctx context.Context, typeId string, body PostConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigurationResponse, error)

	// DeleteConfigurationWithResponse request
	DeleteConfigurationWithResponse(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*DeleteConfigurationResponse, error)

	// GetConfigurationWithResponse request
	GetConfigurationWithResponse(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*GetConfigurationResponse, error)

	// PutConfigurationWithBodyWithResponse request with any body
	PutConfigurationWithBodyWithResponse(ctx context.Context, typeId string, configId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConfigurationResponse, error)

	PutConfigurationWithResponse(ctx context.Context, typeId string, configId string, body PutConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConfigurationResponse, error)

	// GetExperimentsWithResponse request
	GetExperimentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExperimentsResponse, error)

	// PostExperimentWithBodyWithResponse request with any body
	PostExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExperimentResponse, error)

	PostExperimentWithResponse(ctx context.Context, body PostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExperimentResponse, error)

	// DeleteExperimentWithResponse request
	DeleteExperimentWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteExperimentResponse, error)

	// GetExperimentWithResponse request
	GetExperimentWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetExperimentResponse, error)

	// GetProvidersWithResponse request
	GetProvidersWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error)

	// GetXYTreeWithBodyWithResponse request with any body
	GetXYTreeWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetXYTreeResponse, error)

	GetXYTreeWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetXYTreeResponse, error)

	// GetXYWithBodyWithResponse request with any body
	GetXYWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetXYResponse, error)

	GetXYWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYJSONRequestBody, reqEditors ...RequestEditorFn) (*GetXYResponse, error)

	// GetDataTreeWithBodyWithResponse request with any body
	GetDataTreeWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDataTreeResponse, error)

	GetDataTreeWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetDataTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDataTreeResponse, error)

	// GetMarkerSetsWithResponse request
	GetMarkerSetsWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMarkerSetsResponse, error)

	// GetColumnsWithBodyWithResponse request with any body
	GetColumnsWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetColumnsResponse, error)

	GetColumnsWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetColumnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetColumnsResponse, error)

	// GetLinesWithBodyWithResponse request with any body
	GetLinesWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLinesResponse, error)

	GetLinesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLinesResponse, error)

	// GetArrowsWithBodyWithResponse request with any body
	GetArrowsWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetArrowsResponse, error)

	GetArrowsWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetArrowsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetArrowsResponse, error)

	// GetStatesWithBodyWithResponse request with any body
	GetStatesWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStatesResponse, error)

	GetStatesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStatesResponse, error)

	// GetTimeGraphTooltipWithBodyWithResponse request with any body
	GetTimeGraphTooltipWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTimeGraphTooltipResponse, error)

	GetTimeGraphTooltipWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTooltipJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTimeGraphTooltipResponse, error)

	// GetTimeGraphTreeWithBodyWithResponse request with any body
	GetTimeGraphTreeWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTimeGraphTreeResponse, error)

	GetTimeGraphTreeWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTimeGraphTreeResponse, error)

	// GetProviderWithResponse request
	GetProviderWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error)

	// GetAnnotationCategoriesWithResponse request
	GetAnnotationCategoriesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, params *GetAnnotationCategoriesParams, reqEditors ...RequestEditorFn) (*GetAnnotationCategoriesResponse, error)

	// GetAnnotationsWithBodyWithResponse request with any body
	GetAnnotationsWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAnnotationsResponse, error)

	GetAnnotationsWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAnnotationsResponse, error)

	// GetStylesWithBodyWithResponse request with any body
	GetStylesWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStylesResponse, error)

	GetStylesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStylesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStylesResponse, error)

	// GetHealthStatusWithResponse request
	GetHealthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthStatusResponse, error)

	// GetSystemInfoWithResponse request
	GetSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemInfoResponse, error)

	// GetTracesWithResponse request
	GetTracesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTracesResponse, error)

	// PutTraceWithBodyWithResponse request with any body
	PutTraceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTraceResponse, error)

	PutTraceWithResponse(ctx context.Context, body PutTraceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTraceResponse, error)

	// DeleteTraceWithResponse request
	DeleteTraceWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTraceResponse, error)

	// GetTraceWithResponse request
	GetTraceWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTraceResponse, error)
}

type GetConfigurationTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConfigurationSourceType
}

// Status returns HTTPResponse.Status
func (r GetConfigurationTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationSourceType
}

// Status returns HTTPResponse.Status
func (r GetConfigurationTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Configuration
}

// Status returns HTTPResponse.Status
func (r GetConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r PostConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r DeleteConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r GetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r PutConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Experiment
}

// Status returns HTTPResponse.Status
func (r GetExperimentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experiment
}

// Status returns HTTPResponse.Status
func (r PostExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experiment
}

// Status returns HTTPResponse.Status
func (r DeleteExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExperimentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Experiment
}

// Status returns HTTPResponse.Status
func (r GetExperimentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExperimentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DataProvider
}

// Status returns HTTPResponse.Status
func (r GetProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetXYTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XYTreeResponse
}

// Status returns HTTPResponse.Status
func (r GetXYTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetXYTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetXYResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XYResponse
}

// Status returns HTTPResponse.Status
func (r GetXYResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetXYResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDataTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *XYTreeResponse
}

// Status returns HTTPResponse.Status
func (r GetDataTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDataTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarkerSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarkerSetsResponse
}

// Status returns HTTPResponse.Status
func (r GetMarkerSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarkerSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColumnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TableColumnHeadersResponse
}

// Status returns HTTPResponse.Status
func (r GetColumnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColumnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VirtualTableResponse
}

// Status returns HTTPResponse.Status
func (r GetLinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArrowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeGraphArrowsResponse
}

// Status returns HTTPResponse.Status
func (r GetArrowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArrowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeGraphStatesResponse
}

// Status returns HTTPResponse.Status
func (r GetStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeGraphTooltipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeGraphTooltipResponse
}

// Status returns HTTPResponse.Status
func (r GetTimeGraphTooltipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeGraphTooltipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeGraphTreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimeGraphTreeResponse
}

// Status returns HTTPResponse.Status
func (r GetTimeGraphTreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeGraphTreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataProvider
}

// Status returns HTTPResponse.Status
func (r GetProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnotationCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnotationCategoriesResponse
}

// Status returns HTTPResponse.Status
func (r GetAnnotationCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnotationCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnotationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnotationResponse
}

// Status returns HTTPResponse.Status
func (r GetAnnotationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnotationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStylesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StylesResponse
}

// Status returns HTTPResponse.Status
func (r GetStylesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStylesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerStatus
}

// Status returns HTTPResponse.Status
func (r GetHealthStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetSystemInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
}

// Status returns HTTPResponse.Status
func (r GetTracesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTraceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trace
	JSON409      *string
}

// Status returns HTTPResponse.Status
func (r PutTraceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTraceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTraceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trace
}

// Status returns HTTPResponse.Status
func (r DeleteTraceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTraceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trace
}

// Status returns HTTPResponse.Status
func (r GetTraceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConfigurationTypesWithResponse request returning *GetConfigurationTypesResponse
func (c *ClientWithResponses) GetConfigurationTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigurationTypesResponse, error) {
	rsp, err := c.GetConfigurationTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationTypesResponse(rsp)
}

// GetConfigurationTypeWithResponse request returning *GetConfigurationTypeResponse
func (c *ClientWithResponses) GetConfigurationTypeWithResponse(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*GetConfigurationTypeResponse, error) {
	rsp, err := c.GetConfigurationType(ctx, typeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationTypeResponse(rsp)
}

// GetConfigurationsWithResponse request returning *GetConfigurationsResponse
func (c *ClientWithResponses) GetConfigurationsWithResponse(ctx context.Context, typeId string, reqEditors ...RequestEditorFn) (*GetConfigurationsResponse, error) {
	rsp, err := c.GetConfigurations(ctx, typeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationsResponse(rsp)
}

// PostConfigurationWithBodyWithResponse request with arbitrary body returning *PostConfigurationResponse
func (c *ClientWithResponses) PostConfigurationWithBodyWithResponse(ctx context.Context, typeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostConfigurationResponse, error) {
	rsp, err := c.PostConfigurationWithBody(ctx, typeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PostConfigurationWithResponse(ctx context.Context, typeId string, body PostConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostConfigurationResponse, error) {
	rsp, err := c.PostConfiguration(ctx, typeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConfigurationResponse(rsp)
}

// DeleteConfigurationWithResponse request returning *DeleteConfigurationResponse
func (c *ClientWithResponses) DeleteConfigurationWithResponse(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*DeleteConfigurationResponse, error) {
	rsp, err := c.DeleteConfiguration(ctx, typeId, configId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConfigurationResponse(rsp)
}

// GetConfigurationWithResponse request returning *GetConfigurationResponse
func (c *ClientWithResponses) GetConfigurationWithResponse(ctx context.Context, typeId string, configId string, reqEditors ...RequestEditorFn) (*GetConfigurationResponse, error) {
	rsp, err := c.GetConfiguration(ctx, typeId, configId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigurationResponse(rsp)
}

// PutConfigurationWithBodyWithResponse request with arbitrary body returning *PutConfigurationResponse
func (c *ClientWithResponses) PutConfigurationWithBodyWithResponse(ctx context.Context, typeId string, configId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutConfigurationResponse, error) {
	rsp, err := c.PutConfigurationWithBody(ctx, typeId, configId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PutConfigurationWithResponse(ctx context.Context, typeId string, configId string, body PutConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutConfigurationResponse, error) {
	rsp, err := c.PutConfiguration(ctx, typeId, configId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutConfigurationResponse(rsp)
}

// GetExperimentsWithResponse request returning *GetExperimentsResponse
func (c *ClientWithResponses) GetExperimentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetExperimentsResponse, error) {
	rsp, err := c.GetExperiments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentsResponse(rsp)
}

// PostExperimentWithBodyWithResponse request with arbitrary body returning *PostExperimentResponse
func (c *ClientWithResponses) PostExperimentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExperimentResponse, error) {
	rsp, err := c.PostExperimentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExperimentResponse(rsp)
}

func (c *ClientWithResponses) PostExperimentWithResponse(ctx context.Context, body PostExperimentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExperimentResponse, error) {
	rsp, err := c.PostExperiment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExperimentResponse(rsp)
}

// DeleteExperimentWithResponse request returning *DeleteExperimentResponse
func (c *ClientWithResponses) DeleteExperimentWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteExperimentResponse, error) {
	rsp, err := c.DeleteExperiment(ctx, expUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteExperimentResponse(rsp)
}

// GetExperimentWithResponse request returning *GetExperimentResponse
func (c *ClientWithResponses) GetExperimentWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetExperimentResponse, error) {
	rsp, err := c.GetExperiment(ctx, expUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExperimentResponse(rsp)
}

// GetProvidersWithResponse request returning *GetProvidersResponse
func (c *ClientWithResponses) GetProvidersWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error) {
	rsp, err := c.GetProviders(ctx, expUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersResponse(rsp)
}

// GetXYTreeWithBodyWithResponse request with arbitrary body returning *GetXYTreeResponse
func (c *ClientWithResponses) GetXYTreeWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetXYTreeResponse, error) {
	rsp, err := c.GetXYTreeWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetXYTreeResponse(rsp)
}

func (c *ClientWithResponses) GetXYTreeWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetXYTreeResponse, error) {
	rsp, err := c.GetXYTree(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetXYTreeResponse(rsp)
}

// GetXYWithBodyWithResponse request with arbitrary body returning *GetXYResponse
func (c *ClientWithResponses) GetXYWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetXYResponse, error) {
	rsp, err := c.GetXYWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetXYResponse(rsp)
}

func (c *ClientWithResponses) GetXYWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetXYJSONRequestBody, reqEditors ...RequestEditorFn) (*GetXYResponse, error) {
	rsp, err := c.GetXY(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetXYResponse(rsp)
}

// GetDataTreeWithBodyWithResponse request with arbitrary body returning *GetDataTreeResponse
func (c *ClientWithResponses) GetDataTreeWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDataTreeResponse, error) {
	rsp, err := c.GetDataTreeWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataTreeResponse(rsp)
}

func (c *ClientWithResponses) GetDataTreeWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetDataTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDataTreeResponse, error) {
	rsp, err := c.GetDataTree(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDataTreeResponse(rsp)
}

// GetMarkerSetsWithResponse request returning *GetMarkerSetsResponse
func (c *ClientWithResponses) GetMarkerSetsWithResponse(ctx context.Context, expUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMarkerSetsResponse, error) {
	rsp, err := c.GetMarkerSets(ctx, expUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarkerSetsResponse(rsp)
}

// GetColumnsWithBodyWithResponse request with arbitrary body returning *GetColumnsResponse
func (c *ClientWithResponses) GetColumnsWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetColumnsResponse, error) {
	rsp, err := c.GetColumnsWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColumnsResponse(rsp)
}

func (c *ClientWithResponses) GetColumnsWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetColumnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetColumnsResponse, error) {
	rsp, err := c.GetColumns(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColumnsResponse(rsp)
}

// GetLinesWithBodyWithResponse request with arbitrary body returning *GetLinesResponse
func (c *ClientWithResponses) GetLinesWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLinesResponse, error) {
	rsp, err := c.GetLinesWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLinesResponse(rsp)
}

func (c *ClientWithResponses) GetLinesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLinesResponse, error) {
	rsp, err := c.GetLines(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLinesResponse(rsp)
}

// GetArrowsWithBodyWithResponse request with arbitrary body returning *GetArrowsResponse
func (c *ClientWithResponses) GetArrowsWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetArrowsResponse, error) {
	rsp, err := c.GetArrowsWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArrowsResponse(rsp)
}

func (c *ClientWithResponses) GetArrowsWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetArrowsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetArrowsResponse, error) {
	rsp, err := c.GetArrows(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArrowsResponse(rsp)
}

// GetStatesWithBodyWithResponse request with arbitrary body returning *GetStatesResponse
func (c *ClientWithResponses) GetStatesWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStatesResponse, error) {
	rsp, err := c.GetStatesWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatesResponse(rsp)
}

func (c *ClientWithResponses) GetStatesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStatesResponse, error) {
	rsp, err := c.GetStates(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatesResponse(rsp)
}

// GetTimeGraphTooltipWithBodyWithResponse request with arbitrary body returning *GetTimeGraphTooltipResponse
func (c *ClientWithResponses) GetTimeGraphTooltipWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTimeGraphTooltipResponse, error) {
	rsp, err := c.GetTimeGraphTooltipWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeGraphTooltipResponse(rsp)
}

func (c *ClientWithResponses) GetTimeGraphTooltipWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTooltipJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTimeGraphTooltipResponse, error) {
	rsp, err := c.GetTimeGraphTooltip(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeGraphTooltipResponse(rsp)
}

// GetTimeGraphTreeWithBodyWithResponse request with arbitrary body returning *GetTimeGraphTreeResponse
func (c *ClientWithResponses) GetTimeGraphTreeWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetTimeGraphTreeResponse, error) {
	rsp, err := c.GetTimeGraphTreeWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeGraphTreeResponse(rsp)
}

func (c *ClientWithResponses) GetTimeGraphTreeWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetTimeGraphTreeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetTimeGraphTreeResponse, error) {
	rsp, err := c.GetTimeGraphTree(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeGraphTreeResponse(rsp)
}

// GetProviderWithResponse request returning *GetProviderResponse
func (c *ClientWithResponses) GetProviderWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, reqEditors ...RequestEditorFn) (*GetProviderResponse, error) {
	rsp, err := c.GetProvider(ctx, expUUID, outputId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderResponse(rsp)
}

// GetAnnotationCategoriesWithResponse request returning *GetAnnotationCategoriesResponse
func (c *ClientWithResponses) GetAnnotationCategoriesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, params *GetAnnotationCategoriesParams, reqEditors ...RequestEditorFn) (*GetAnnotationCategoriesResponse, error) {
	rsp, err := c.GetAnnotationCategories(ctx, expUUID, outputId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnotationCategoriesResponse(rsp)
}

// GetAnnotationsWithBodyWithResponse request with arbitrary body returning *GetAnnotationsResponse
func (c *ClientWithResponses) GetAnnotationsWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAnnotationsResponse, error) {
	rsp, err := c.GetAnnotationsWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnotationsResponse(rsp)
}

func (c *ClientWithResponses) GetAnnotationsWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAnnotationsResponse, error) {
	rsp, err := c.GetAnnotations(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnotationsResponse(rsp)
}

// GetStylesWithBodyWithResponse request with arbitrary body returning *GetStylesResponse
func (c *ClientWithResponses) GetStylesWithBodyWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStylesResponse, error) {
	rsp, err := c.GetStylesWithBody(ctx, expUUID, outputId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStylesResponse(rsp)
}

func (c *ClientWithResponses) GetStylesWithResponse(ctx context.Context, expUUID openapi_types.UUID, outputId string, body GetStylesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStylesResponse, error) {
	rsp, err := c.GetStyles(ctx, expUUID, outputId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStylesResponse(rsp)
}

// GetHealthStatusWithResponse request returning *GetHealthStatusResponse
func (c *ClientWithResponses) GetHealthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthStatusResponse, error) {
	rsp, err := c.GetHealthStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthStatusResponse(rsp)
}

// GetSystemInfoWithResponse request returning *GetSystemInfoResponse
func (c *ClientWithResponses) GetSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemInfoResponse, error) {
	rsp, err := c.GetSystemInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemInfoResponse(rsp)
}

// GetTracesWithResponse request returning *GetTracesResponse
func (c *ClientWithResponses) GetTracesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTracesResponse, error) {
	rsp, err := c.GetTraces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracesResponse(rsp)
}

// PutTraceWithBodyWithResponse request with arbitrary body returning *PutTraceResponse
func (c *ClientWithResponses) PutTraceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTraceResponse, error) {
	rsp, err := c.PutTraceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTraceResponse(rsp)
}

func (c *ClientWithResponses) PutTraceWithResponse(ctx context.Context, body PutTraceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTraceResponse, error) {
	rsp, err := c.PutTrace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTraceResponse(rsp)
}

// DeleteTraceWithResponse request returning *DeleteTraceResponse
func (c *ClientWithResponses) DeleteTraceWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTraceResponse, error) {
	rsp, err := c.DeleteTrace(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTraceResponse(rsp)
}

// GetTraceWithResponse request returning *GetTraceResponse
func (c *ClientWithResponses) GetTraceWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTraceResponse, error) {
	rsp, err := c.GetTrace(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceResponse(rsp)
}

// ParseGetConfigurationTypesResponse parses an HTTP response from a GetConfigurationTypesWithResponse call
func ParseGetConfigurationTypesResponse(rsp *http.Response) (*GetConfigurationTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConfigurationSourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigurationTypeResponse parses an HTTP response from a GetConfigurationTypeWithResponse call
func ParseGetConfigurationTypeResponse(rsp *http.Response) (*GetConfigurationTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationSourceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigurationsResponse parses an HTTP response from a GetConfigurationsWithResponse call
func ParseGetConfigurationsResponse(rsp *http.Response) (*GetConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostConfigurationResponse parses an HTTP response from a PostConfigurationWithResponse call
func ParsePostConfigurationResponse(rsp *http.Response) (*PostConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConfigurationResponse parses an HTTP response from a DeleteConfigurationWithResponse call
func ParseDeleteConfigurationResponse(rsp *http.Response) (*DeleteConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigurationResponse parses an HTTP response from a GetConfigurationWithResponse call
func ParseGetConfigurationResponse(rsp *http.Response) (*GetConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutConfigurationResponse parses an HTTP response from a PutConfigurationWithResponse call
func ParsePutConfigurationResponse(rsp *http.Response) (*PutConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExperimentsResponse parses an HTTP response from a GetExperimentsWithResponse call
func ParseGetExperimentsResponse(rsp *http.Response) (*GetExperimentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostExperimentResponse parses an HTTP response from a PostExperimentWithResponse call
func ParsePostExperimentResponse(rsp *http.Response) (*PostExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteExperimentResponse parses an HTTP response from a DeleteExperimentWithResponse call
func ParseDeleteExperimentResponse(rsp *http.Response) (*DeleteExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExperimentResponse parses an HTTP response from a GetExperimentWithResponse call
func ParseGetExperimentResponse(rsp *http.Response) (*GetExperimentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExperimentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Experiment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProvidersResponse parses an HTTP response from a GetProvidersWithResponse call
func ParseGetProvidersResponse(rsp *http.Response) (*GetProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DataProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetXYTreeResponse parses an HTTP response from a GetXYTreeWithResponse call
func ParseGetXYTreeResponse(rsp *http.Response) (*GetXYTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetXYTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XYTreeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetXYResponse parses an HTTP response from a GetXYWithResponse call
func ParseGetXYResponse(rsp *http.Response) (*GetXYResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetXYResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XYResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDataTreeResponse parses an HTTP response from a GetDataTreeWithResponse call
func ParseGetDataTreeResponse(rsp *http.Response) (*GetDataTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDataTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest XYTreeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMarkerSetsResponse parses an HTTP response from a GetMarkerSetsWithResponse call
func ParseGetMarkerSetsResponse(rsp *http.Response) (*GetMarkerSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarkerSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarkerSetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetColumnsResponse parses an HTTP response from a GetColumnsWithResponse call
func ParseGetColumnsResponse(rsp *http.Response) (*GetColumnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColumnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TableColumnHeadersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLinesResponse parses an HTTP response from a GetLinesWithResponse call
func ParseGetLinesResponse(rsp *http.Response) (*GetLinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VirtualTableResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetArrowsResponse parses an HTTP response from a GetArrowsWithResponse call
func ParseGetArrowsResponse(rsp *http.Response) (*GetArrowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArrowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeGraphArrowsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatesResponse parses an HTTP response from a GetStatesWithResponse call
func ParseGetStatesResponse(rsp *http.Response) (*GetStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeGraphStatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeGraphTooltipResponse parses an HTTP response from a GetTimeGraphTooltipWithResponse call
func ParseGetTimeGraphTooltipResponse(rsp *http.Response) (*GetTimeGraphTooltipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeGraphTooltipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeGraphTooltipResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeGraphTreeResponse parses an HTTP response from a GetTimeGraphTreeWithResponse call
func ParseGetTimeGraphTreeResponse(rsp *http.Response) (*GetTimeGraphTreeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeGraphTreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimeGraphTreeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderResponse parses an HTTP response from a GetProviderWithResponse call
func ParseGetProviderResponse(rsp *http.Response) (*GetProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAnnotationCategoriesResponse parses an HTTP response from a GetAnnotationCategoriesWithResponse call
func ParseGetAnnotationCategoriesResponse(rsp *http.Response) (*GetAnnotationCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnotationCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnotationCategoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAnnotationsResponse parses an HTTP response from a GetAnnotationsWithResponse call
func ParseGetAnnotationsResponse(rsp *http.Response) (*GetAnnotationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnotationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnotationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStylesResponse parses an HTTP response from a GetStylesWithResponse call
func ParseGetStylesResponse(rsp *http.Response) (*GetStylesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStylesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StylesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthStatusResponse parses an HTTP response from a GetHealthStatusWithResponse call
func ParseGetHealthStatusResponse(rsp *http.Response) (*GetHealthStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemInfoResponse parses an HTTP response from a GetSystemInfoWithResponse call
func ParseGetSystemInfoResponse(rsp *http.Response) (*GetSystemInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTracesResponse parses an HTTP response from a GetTracesWithResponse call
func ParseGetTracesResponse(rsp *http.Response) (*GetTracesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTraceResponse parses an HTTP response from a PutTraceWithResponse call
func ParsePutTraceResponse(rsp *http.Response) (*PutTraceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTraceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteTraceResponse parses an HTTP response from a DeleteTraceWithResponse call
func ParseDeleteTraceResponse(rsp *http.Response) (*DeleteTraceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTraceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTraceResponse parses an HTTP response from a GetTraceWithResponse call
func ParseGetTraceResponse(rsp *http.Response) (*GetTraceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
